apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: priority-low
value: 1000
description: "nginx fluentd"
---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: priority-medium
value: 2000
description: "wordpress"
---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: priority-high
value: 3000
description: "mysql"

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-hostpath
  labels:
    type: local
spec:
  storageClassName: mysql-hostpath
  persistentVolumeReclaimPolicy: Retain
  capacity:
    storage: 10Gi 
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/run/desktop/mnt/host/e/k8s-vol/mysql-hostpath"
    type: DirectoryOrCreate

---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: opaque
stringData:
  MYSQL_ROOT_PASSWORD: password
  MYSQL_DATABASE: exampledb
  MYSQL_USER: exampleuser
  MYSQL_PASSWORD: examplepass
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql-statefulset
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: "mysql-service"
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec: 
      priorityClassName: priority-high
      # 親和力設定
      affinity:
        podAffinity:
          # 儘可能貼近同一臺主機
          preferredDuringSchedulingIgnoredDuringExecution: 
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - wordpress
                  - nginx
              topologyKey: "kubernetes.io/hostname"
        podAntiAffinity:
          # 儘可能讓同樣服務分散在其他主機   
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - mysql
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: mysql
        image: mysql:8.0.27 
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-hostpath
          mountPath: /var/lib/mysql 
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom: 
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
        # 優雅關機
        lifecycle:
          preStop:
            exec:  
              command: ["mysqladmin", "-u", "root", "-p$MYSQL_ROOT_PASSWORD", "shutdown"]  
      terminationGracePeriodSeconds: 60
  volumeClaimTemplates:   
  - metadata:
      name: mysql-hostpath 
    spec:
      storageClassName: mysql-hostpath
      accessModes: 
      - ReadWriteMany
      resources:
        requests:
          storage: 1Gi 

---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql
  ports:
    - port: 3306
      protocol: TCP
      targetPort: 3306
  #type: ClusterIP
  clusterIP: None
  
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: wordpress-hostpath
  labels:
    type: local
spec:
  storageClassName: wordpress-hostpath
  persistentVolumeReclaimPolicy: Retain
  capacity:
    storage: 10Gi 
  accessModes:  
    - ReadWriteMany
  hostPath:
    path: "/run/desktop/mnt/host/e/k8s-vol/wordpress-hostpath"
    type: DirectoryOrCreate

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-hostpath
spec:
  storageClassName: wordpress-hostpath
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress-deployment
  labels:
    app: wordpress
spec: 
  replicas: 1 
  selector:
    matchLabels:
      app: wordpress
  template: 
    metadata:
      labels:
        app: wordpress
    spec:
      priorityClassName: priority-medium
      # 親和力設定
      affinity:
        podAffinity:
          # 儘可能貼近其他服務
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - mysql
                  - nginx
              topologyKey: "kubernetes.io/hostname"
        podAntiAffinity:
          # 儘可能讓同樣服務分散在其他主機
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - wordpress
              topologyKey: "kubernetes.io/hostname"
      initContainers:
      - name: init-mysql-service
        image: busybox:1.28
        command: ['sh', '-c', 'until nslookup mysql-service; do echo waiting for mysql-service; sleep 2; done']
      containers:    
      - name: wordpress
        image: wordpress:5.8.2-apache
        ports: 
        - containerPort: 80
        resources:
          limits:
            cpu: "500m"
            memory: "500Mi"
          requests:
            cpu: "150m"
            memory: "100Mi" 
        #volumeMounts:
        #- name: wordpress-content
        #  mountPath: /var/www/html/wp-content
        env: 
        - name: WORDPRESS_DB_HOST
          #value: "mysql-service.default.svc.cluster.local:3306"
          value: "mysql-service:3306"
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD  
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_DATABASE
        # 確保MySQL正確啟動，再來啟動WordPress
        livenessProbe:
          tcpSocket:
            host: mysql-service
            port: 3306
          initialDelaySeconds: 60
          periodSeconds: 600
        volumeMounts:
        - mountPath: /var/www/html
          name: wordpress-hostpath
        # 優雅關閉 
        lifecycle:
          preStop:
            exec: 
              command: ["/etc/init.d/apache2", "stop"]
      terminationGracePeriodSeconds: 60
      volumes:
      - name: wordpress-hostpath
        persistentVolumeClaim:
          claimName: wordpress-hostpath
        #hostPath:
        #  path: /run/desktop/mnt/host/e/k8s-vol/wordpress-wp-content
        #  type: DirectoryOrCreate
 
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: wordpress-hpa
spec: 
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: wordpress-deployment
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 60
 
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
spec:
  selector:
    app: wordpress
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
data:
  nginx.conf: |
    server {
            listen 80 default_server;
            location / {
                # $http_host is the host name that users seen on the browser URL
                # and it equals to `HTTP_HOST` request header.
                proxy_set_header Host $http_host;

                proxy_pass http://wordpress-service;

                # Modify `Location` of 301 or 302 HTTP response, so
                # that the browser will follow the correct location.
                # proxy_redirect ~^http://[^/]*/(.*) http://$http_host/$1;
            }
            access_log /var/log/nginx/access.log main;
            error_log /var/log/nginx/error.log warn;
        }
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nginx-log-hostpath
  labels:
    type: local
spec:
  storageClassName: nginx-log-hostpath 
  persistentVolumeReclaimPolicy: Retain
  capacity:
    storage: 10Gi 
  accessModes:  
    - ReadWriteMany
  hostPath:
    path: "/run/desktop/mnt/host/e/k8s-vol/nginx-log-hostpath"
    type: DirectoryOrCreate

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nginx-log-hostpath
spec:
  storageClassName: nginx-log-hostpath
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi  
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:    
      priorityClassName: priority-low
      # 親和力設定
      affinity:
        podAffinity:
          # 儘可能貼近MySQL
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - mysql
                  - wordpress
              topologyKey: "kubernetes.io/hostname"
        podAntiAffinity:
          # 儘可能讓同樣服務分散在其他主機
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - nginx
              topologyKey: "kubernetes.io/hostname"
      initContainers:
      - name: init-wordpress-service
        image: busybox:1.28
        command: ['sh', '-c', 'until nslookup wordpress-service; do echo waiting for wordpress-service; sleep 2; done']
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80
        - containerPort: 8080
        resources:
          limits:
            cpu: "200m"
            memory: "200Mi"
          requests:
            cpu: "150m"
            memory: "100Mi"
        volumeMounts:
        - mountPath: /etc/nginx/conf.d # mount nginx-conf volumn to /etc/nginx
          readOnly: true
          name: nginx-conf
        - mountPath: /var/log/nginx
          name: log
        # 確保WordPress正確啟動，再來啟動Nginx
        livenessProbe:
          tcpSocket:
            host: wordpress-service
            port: 80 
          initialDelaySeconds: 30
          periodSeconds: 600
        # 優雅關閉 
        lifecycle:
          preStop:
            exec: 
              command: ["/usr/sbin/nginx", "-s", "quit"]
      terminationGracePeriodSeconds: 60
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf # place ConfigMap `nginx-conf` on /etc/nginx
          items:
            - key: nginx.conf
              path: nginx.conf 
      - name: log
        persistentVolumeClaim:
          claimName: nginx-log-hostpath
      
              
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-conf
data:
  fluent.conf: |
                <source>
                  type tail
                  path /logs/access.log
                  tag nginx.access
                  format nginx
                </source>

                <source>
                  @type tail
                  format /^(?<time>\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}) \[(?<log_level>\w+)\] (?<pid>\d+).(?<tid>\d+): (?<message>.*)$/
                  tag nginx.error
                  path /logs/error.log
                </source>

                <match nginx.access>
                  @type stdout
                </match>

                <match nginx.error>
                  @type stdout
                </match>
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluentd-daemonset
spec:
  selector:
    matchLabels:
      app: fluentd
  template:
    metadata:
      labels:
        app: fluentd
    spec:
      priorityClassName: priority-low
      containers:
      - name: fluentd
        image: fluentd:v1.14-1  
        volumeMounts: 
          # 掛載fluentd 設定檔 
          - name: fluentd-config-volume
            mountPath: /fluentd/etc
          # 與nginx共用log-volume
          - name: log
            mountPath: /logs 
      volumes:
        - name: fluentd-config-volume
          configMap: 
            name: fluentd-conf
            items:
              - key: fluent.conf
                path: fluent.conf
        - name: log
          persistentVolumeClaim:
            claimName: nginx-log-hostpath
            