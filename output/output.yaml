apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-host-path
  labels:
    type: local
spec:
  storageClassName: mysql-host-path
  persistentVolumeReclaimPolicy: Retain
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/run/desktop/mnt/host/e/k8s-vol/mysql-host-path"

---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: opaque
stringData:
  MYSQL_ROOT_PASSWORD: password
  MYSQL_DATABASE: exampledb
  MYSQL_USER: exampleuser
  MYSQL_PASSWORD: examplepass
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql-statefulset
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: "mysql-service"
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      terminationGracePeriodSeconds: 1
      containers:
      - name: mysql
        image: mysql:8.0.27 
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-store
          mountPath: /var/lib/mysql
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: MYSQL_ROOT_PASSWORD
          - name: MYSQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: MYSQL_DATABASE
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: MYSQL_USER
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: MYSQL_PASSWORD
  volumeClaimTemplates:
  - metadata:
      name: mysql-store
    spec:
      accessModes: ["ReadWriteOnce"] 
      resources:
        requests:
          storage: 1Gi 

---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql
  ports:
    - port: 3306
      protocol: TCP
      targetPort: 3306
  #type: ClusterIP
  clusterIP: None
  
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress-deployment
  labels:
    app: wordpress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:5.8.2-apache
        ports:
        - containerPort: 80
        resources:
          limits:
            cpu: "500m"
            memory: "500Mi"
          requests:
            cpu: "150m"
            memory: "100Mi" 
        #volumeMounts:
        #- name: wordpress-content
        #  mountPath: /var/www/html/wp-content
        env: 
        - name: WORDPRESS_DB_HOST
          #value: "mysql-service.default.svc.cluster.local:3306"
          value: "mysql-service:3306"
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD  
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_DATABASE
        # 確保MySQL正確啟動，再來啟動WordPress
        livenessProbe:
          tcpSocket:
            host: mysql-service
            port: 3306
          initialDelaySeconds: 3
          periodSeconds: 600
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
spec:
  selector:
    app: wordpress
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
data:
  nginx.conf: |
    server {
            listen 80 default_server;
            location / {
                # $http_host is the host name that users seen on the browser URL
                # and it equals to `HTTP_HOST` request header.
                proxy_set_header Host $http_host;

                proxy_pass http://wordpress-service;

                # Modify `Location` of 301 or 302 HTTP response, so
                # that the browser will follow the correct location.
                # proxy_redirect ~^http://[^/]*/(.*) http://$http_host/$1;
            }
            access_log /var/log/nginx/access.log main;
            error_log /var/log/nginx/error.log warn;
        }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80
        - containerPort: 8080
        resources:
          limits:
            cpu: "200m"
            memory: "200Mi"
          requests:
            cpu: "150m"
            memory: "100Mi"
        volumeMounts:
        - mountPath: /etc/nginx/conf.d # mount nginx-conf volumn to /etc/nginx
          readOnly: true
          name: nginx-conf
        - mountPath: /var/log/nginx
          name: log
        # 確保WordPress正確啟動，再來啟動Nginx
        livenessProbe:
          tcpSocket:
            host: wordpress-service
            port: 80 
          initialDelaySeconds: 3
          periodSeconds: 600
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf # place ConfigMap `nginx-conf` on /etc/nginx
          items:
            - key: nginx.conf
              path: nginx.conf 
      - name: log
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80